{"ast":null,"code":"var _jsxFileName = \"/Users/zeyneptugcesoysal/Downloads/interactive-comments-section-main/src/components/ReplyComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatRelativeTime(timestamp) {\n  return formatDistanceToNow(new Date(timestamp), {\n    addSuffix: true\n  });\n}\nconst ReplyComment = ({\n  currentUser,\n  commentsData,\n  setCommentsData,\n  commentId\n}) => {\n  _s();\n  var _currentUser$image;\n  const [replyContent, setReplyContent] = useState(\"\");\n  const sendReply = (replyID = null) => {\n    try {\n      const targetComment = replyID ? commentsData.find(c => c.id === commentId) : commentsData.find(comment => commentId === comment.id);\n      if (!targetComment) return;\n      const newReply = {\n        id: targetComment.replies.length + 1,\n        content: replyContent,\n        createdAt: formatRelativeTime(Date.now()),\n        replyingTo: replyID ? targetComment.replies.find(r => r.id === replyID).user.username : targetComment.user.username,\n        score: 0,\n        user: currentUser\n      };\n      const updatedComments = commentsData.map(c => c.id === targetComment.id ? {\n        ...c,\n        replies: [...c.replies, newReply]\n      } : c);\n      setCommentsData(updatedComments);\n      setReplyContent(\"\");\n    } catch (error) {\n      console.error(\"Error sending comment:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"send-comment card\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Add a comment...\",\n      value: replyContent,\n      onChange: e => setReplyContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: (_currentUser$image = currentUser.image) === null || _currentUser$image === void 0 ? void 0 : _currentUser$image.png,\n        className: \"current-avatar\",\n        alt: \"user avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendReply(),\n        className: \"send-button\",\n        children: \"reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ReplyComment, \"BQv3RfvH7YGNo+79P7npwBkyFDo=\");\n_c = ReplyComment;\nexport default ReplyComment;\nvar _c;\n$RefreshReg$(_c, \"ReplyComment\");","map":{"version":3,"names":["React","useState","formatDistanceToNow","jsxDEV","_jsxDEV","formatRelativeTime","timestamp","Date","addSuffix","ReplyComment","currentUser","commentsData","setCommentsData","commentId","_s","_currentUser$image","replyContent","setReplyContent","sendReply","replyID","targetComment","find","c","id","comment","newReply","replies","length","content","createdAt","now","replyingTo","r","user","username","score","updatedComments","map","error","console","className","children","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","src","image","png","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/zeyneptugcesoysal/Downloads/interactive-comments-section-main/src/components/ReplyComment.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nfunction formatRelativeTime(timestamp) {\n  return formatDistanceToNow(new Date(timestamp), { addSuffix: true });\n}\n\nconst ReplyComment = ({\n  currentUser,\n  commentsData,\n  setCommentsData,\n  commentId,\n}) => {\n  const [replyContent, setReplyContent] = useState(\"\");\n\n  const sendReply = (replyID = null) => {\n    try {\n      const targetComment = replyID\n        ? commentsData.find((c) => c.id === commentId)\n        : commentsData.find((comment) => commentId === comment.id);\n      if (!targetComment) return;\n\n      const newReply = {\n        id: targetComment.replies.length + 1,\n        content: replyContent,\n        createdAt: formatRelativeTime(Date.now()),\n        replyingTo: replyID\n          ? targetComment.replies.find((r) => r.id === replyID).user.username\n          : targetComment.user.username,\n        score: 0,\n        user: currentUser,\n      };\n\n      const updatedComments = commentsData.map((c) =>\n        c.id === targetComment.id\n          ? { ...c, replies: [...c.replies, newReply] }\n          : c,\n      );\n      setCommentsData(updatedComments);\n      setReplyContent(\"\");\n    } catch (error) {\n      console.error(\"Error sending comment:\", error);\n    }\n  };\n\n  return (\n    <div className=\"send-comment card\">\n      <textarea\n        placeholder=\"Add a comment...\"\n        value={replyContent}\n        onChange={(e) => setReplyContent(e.target.value)}\n      ></textarea>\n      <div className=\"card-footer\">\n        <img\n          src={currentUser.image?.png}\n          className=\"current-avatar\"\n          alt=\"user avatar\"\n        />\n        <button onClick={() => sendReply()} className=\"send-button\">\n          reply\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReplyComment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}